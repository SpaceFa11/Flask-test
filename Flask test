# -*- coding: utf-8 -*-
import sqlite3
from random import randint
from flask import Flask, session, redirect, url_for
import os

db_name = 'quiz.sqlite'
conn = None
curor = None

#quiz = 0
#last_question = 0

def open():
    global conn, cursor
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()

def close():
    cursor.close()
    conn.close()

def do(query):
    cursor.execute(query)
    conn.commit()

def clear_db():
    ''' удаляет все таблицы '''
    open()
    query = '''DROP TABLE IF EXISTS quiz_content'''
    do(query)
    query = '''DROP TABLE IF EXISTS question'''
    do(query)
    query = '''DROP TABLE IF EXISTS quiz'''
    do(query)
    close()

def create():
    open()
    cursor.execute('''PRAGMA foreign_keys=on''')

    do('''CREATE TABLE IF NOT EXISTS quiz (
    id INTEGER PRIMARY KEY,
    name VARCHAR)''')

    do('''CREATE TABLE IF NOT EXISTS question (
    id INTEGER PRIMARY KEY,
    question VARCHAR,
    answer VARCHAR,
    wrong1 VARCHAR,
    wrong2 VARCHAR,
    wrong3 VARCHAR)''')

    do('''CREATE TABLE IF NOT EXISTS quiz_content (
    id INTEGER PRIMARY KEY,
    quiz_id INTEGER,
    question_id INTEGER,
    FOREIGN KEY (quiz_id) REFERENCES quiz (id),
    FOREIGN KEY (question_id) REFERENCES question (id) )''')
    close()

def add_questions():
    questions = [
    ('Сколько месяцев в году имеют 28 дней?', 'Все', 'Один', 'Ни одного', 'Два'),
    ('Каким станет зелёный утёс, если упадёт в Красное море?', 'Мокрым', 'Красным', 'Не изменится', 'Фиолетовым'),
    ('Какой рукой лучше размешивать чай?', 'Ложкой', 'Правой', 'Левой', 'Любой'),
    ('Что не имеет длины, глубины, ширины, высоты, а можно измерить?', 'Время', 'Глупость', 'Море', 'Воздух'),
    ('Когда сетью можно вытянуть воду?', 'Когда вода замерзла', 'Когда нет рыбы', 'Когда уплыла золотая рыбка',
    'Когда сеть порвалась'),
    ('Что больше слона и ничего не весит?', 'Тень слона', 'Воздушный шар', 'Парашют', 'Облако')
    ]
    open()
    cursor.executemany('''INSERT INTO question (question, answer, wrong1, wrong2, wrong3) VALUES (?,?,?,?,?)''',
    questions)
    conn.commit()
    close()

def add_quiz():
    quizes = [
    ('Своя игра',),
    ('Кто хочет стать миллионером?',),
    ('Самый умный',)
    ]
    open()
    cursor.executemany('''INSERT INTO quiz (name) VALUES (?)''', quizes)
    conn.commit()
    close()

def add_links():
    open()
    cursor.execute('''PRAGMA foreign_keys=on''')
    query = "INSERT INTO quiz_content (quiz_id, question_id) VALUES (?,?)"
    answer = input("Добавить связь (y / n)?")
    while answer != 'n':
        quiz_id = int(input("id викторины: "))
        question_id = int(input("id вопроса: "))
        cursor.execute(query, [quiz_id, question_id])
        conn.commit()
        answer = input("Добавить связь (y / n)?")
    close()

def show(table):
    query = 'SELECT * FROM ' + table
    open()
    cursor.execute(query)
    print(cursor.fetchall())
    close()

def show_tables():
    show('question')
    show('quiz')
    show('quiz_content')

def get_question_after(question_id=1, quiz_id=1):
    ''' возвращает следующий вопрос после вопроса с переданным id
    для первого вопроса передаётся значение по умолчанию '''
    open()
    query = '''
    SELECT quiz_content.id, question.question, question.answer, question.wrong1, question.wrong2, question.wrong3
    FROM question, quiz_content
    WHERE quiz_content.question_id == question.id
    AND quiz_content.id > ? AND quiz_content.quiz_id == ?
    ORDER BY quiz_content.id '''
    cursor.execute(query, [question_id, quiz_id])
    result = cursor.fetchone()
    print(result)
    close()
    return result

def q(quiz_id = 1):
    open()
    cursor.execute('''SELECT quiz_content.id, question.question, question.answer,
    question.wrong1, question.wrong2, question.wrong3
    FROM question, quiz_content
    ''')
    result = cursor.fetchone()
    print(result)
    close()
    return result

def main():
    clear_db()
    create()
    add_questions()
    add_quiz()
    add_links()
    show_tables()
    #q()


main()

# Здесь будет код веб-приложения
def index():

    global quiz, last_question
    max_quiz = 3
    session['quiz'] = randint(1,max_quiz)
    session['last_question'] = 0
    return '<a href="/test">Тест</a>'

def test():
    #global last_question
    result = get_question_after(session['last_question'],session['quiz'])
    print(result)
    if result is None or len(result) == 0:
        return redirect(url_for('results'))
    else:
        session['last_question'] = result[0]
        print(session['last_question'], session['quiz'])
        return '<h1>' + str(session['quiz']) + '<br>' + str(result) + '</h1>'

def results():
    return "THE END!"
folder = os.getcwd()
app = Flask(__name__)

app.config['SECRET_KEY'] = '123'

app.add_url_rule('/', 'index', index)
app.add_url_rule('/test', 'test', test)
app.add_url_rule('/results', 'results', results)

if __name__ == "__main__":
    app.run()
